/**
 * AdGuard Home
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 
 *
 * OpenAPI spec version: 0.107
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http.js';

/**
* TLS configuration settings and status
*/
export class TlsConfig {
    /**
    * enabled is the encryption (DoT/DoH/HTTPS) status
    */
    'enabled'?: boolean;
    /**
    * server_name is the hostname of your HTTPS/TLS server
    */
    'serverName'?: string;
    /**
    * if true, forces HTTP->HTTPS redirect
    */
    'forceHttps'?: boolean;
    /**
    * HTTPS port. If 0, HTTPS will be disabled.
    */
    'portHttps'?: number;
    /**
    * DNS-over-TLS port. If 0, DoT will be disabled.
    */
    'portDnsOverTls'?: number;
    /**
    * DNS-over-QUIC port. If 0, DoQ will be disabled.
    */
    'portDnsOverQuic'?: number;
    /**
    * Base64 string with PEM-encoded certificates chain
    */
    'certificateChain'?: string;
    /**
    * Base64 string with PEM-encoded private key
    */
    'privateKey'?: string;
    /**
    * Set to true if the user has previously saved a private key as a string.  This is used so that the server and the client don\'t have to send the private key between each other every time, which might lead to security issues. 
    */
    'privateKeySaved'?: boolean;
    /**
    * Path to certificate file
    */
    'certificatePath'?: string;
    /**
    * Path to private key file
    */
    'privateKeyPath'?: string;
    /**
    * Set to true if the specified certificates chain is a valid chain of X509 certificates. 
    */
    'validCert'?: boolean;
    /**
    * Set to true if the specified certificates chain is verified and issued by a known CA. 
    */
    'validChain'?: boolean;
    /**
    * The subject of the first certificate in the chain.
    */
    'subject'?: string;
    /**
    * The issuer of the first certificate in the chain.
    */
    'issuer'?: string;
    /**
    * The NotBefore field of the first certificate in the chain. 
    */
    'notBefore'?: string;
    /**
    * The NotAfter field of the first certificate in the chain. 
    */
    'notAfter'?: string;
    /**
    * The value of SubjectAltNames field of the first certificate in the chain. 
    */
    'dnsNames'?: Array<string>;
    /**
    * Set to true if the key is a valid private key.
    */
    'validKey'?: boolean;
    /**
    * Key type.
    */
    'keyType'?: TlsConfigKeyTypeEnum;
    /**
    * A validation warning message with the issue description. 
    */
    'warningValidation'?: string;
    /**
    * Set to true if both certificate and private key are correct. 
    */
    'validPair'?: boolean;
    /**
    * Set to true if plain DNS is allowed for incoming requests. 
    */
    'servePlainDns'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "serverName",
            "baseName": "server_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "forceHttps",
            "baseName": "force_https",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "portHttps",
            "baseName": "port_https",
            "type": "number",
            "format": "uint16"
        },
        {
            "name": "portDnsOverTls",
            "baseName": "port_dns_over_tls",
            "type": "number",
            "format": "uint16"
        },
        {
            "name": "portDnsOverQuic",
            "baseName": "port_dns_over_quic",
            "type": "number",
            "format": "uint16"
        },
        {
            "name": "certificateChain",
            "baseName": "certificate_chain",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateKey",
            "baseName": "private_key",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateKeySaved",
            "baseName": "private_key_saved",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "certificatePath",
            "baseName": "certificate_path",
            "type": "string",
            "format": ""
        },
        {
            "name": "privateKeyPath",
            "baseName": "private_key_path",
            "type": "string",
            "format": ""
        },
        {
            "name": "validCert",
            "baseName": "valid_cert",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "validChain",
            "baseName": "valid_chain",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string",
            "format": ""
        },
        {
            "name": "issuer",
            "baseName": "issuer",
            "type": "string",
            "format": ""
        },
        {
            "name": "notBefore",
            "baseName": "not_before",
            "type": "string",
            "format": ""
        },
        {
            "name": "notAfter",
            "baseName": "not_after",
            "type": "string",
            "format": ""
        },
        {
            "name": "dnsNames",
            "baseName": "dns_names",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "validKey",
            "baseName": "valid_key",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "keyType",
            "baseName": "key_type",
            "type": "TlsConfigKeyTypeEnum",
            "format": ""
        },
        {
            "name": "warningValidation",
            "baseName": "warning_validation",
            "type": "string",
            "format": ""
        },
        {
            "name": "validPair",
            "baseName": "valid_pair",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "servePlainDns",
            "baseName": "serve_plain_dns",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TlsConfig.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum TlsConfigKeyTypeEnum {
    Rsa = 'RSA',
    Ecdsa = 'ECDSA'
}

