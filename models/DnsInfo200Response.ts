/**
 * AdGuard Home
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 
 *
 * OpenAPI spec version: 0.107
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http.js';

export class DnsInfo200Response {
    /**
    * Bootstrap servers, port is optional after colon.  Empty value will reset it to default values. 
    */
    'bootstrapDns'?: Array<string>;
    /**
    * Upstream servers, port is optional after colon.  Empty value will reset it to default values. 
    */
    'upstreamDns'?: Array<string>;
    /**
    * List of fallback DNS servers used when upstream DNS servers are not responding.  Empty value will clear the list. 
    */
    'fallbackDns'?: Array<string>;
    'upstreamDnsFile'?: string;
    'protectionEnabled'?: boolean;
    'ratelimit'?: number;
    /**
    * Length of the subnet mask for IPv4 addresses.
    */
    'ratelimitSubnetSubnetLenIpv4'?: number;
    /**
    * Length of the subnet mask for IPv6 addresses.
    */
    'ratelimitSubnetSubnetLenIpv6'?: number;
    /**
    * List of IP addresses excluded from rate limiting.
    */
    'ratelimitWhitelist'?: Array<string>;
    'blockingMode'?: DnsInfo200ResponseBlockingModeEnum;
    'blockingIpv4'?: string;
    'blockingIpv6'?: string;
    /**
    * TTL for blocked responses.
    */
    'blockedResponseTtl'?: number;
    /**
    * Protection is pause until this time.  Nullable.
    */
    'protectionDisabledUntil'?: string;
    'ednsCsEnabled'?: boolean;
    'ednsCsUseCustom'?: boolean;
    'ednsCsCustomIp'?: string;
    'disableIpv6'?: boolean;
    'dnssecEnabled'?: boolean;
    'cacheSize'?: number;
    'cacheTtlMin'?: number;
    'cacheTtlMax'?: number;
    'cacheOptimistic'?: boolean;
    /**
    * Upstream modes enumeration.
    */
    'upstreamMode'?: DnsInfo200ResponseUpstreamModeEnum;
    'usePrivatePtrResolvers'?: boolean;
    'resolveClients'?: boolean;
    /**
    * Upstream servers, port is optional after colon.  Empty value will reset it to default values. 
    */
    'localPtrUpstreams'?: Array<string>;
    'defaultLocalPtrUpstreams'?: Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "bootstrapDns",
            "baseName": "bootstrap_dns",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "upstreamDns",
            "baseName": "upstream_dns",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "fallbackDns",
            "baseName": "fallback_dns",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "upstreamDnsFile",
            "baseName": "upstream_dns_file",
            "type": "string",
            "format": ""
        },
        {
            "name": "protectionEnabled",
            "baseName": "protection_enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ratelimit",
            "baseName": "ratelimit",
            "type": "number",
            "format": ""
        },
        {
            "name": "ratelimitSubnetSubnetLenIpv4",
            "baseName": "ratelimit_subnet_subnet_len_ipv4",
            "type": "number",
            "format": ""
        },
        {
            "name": "ratelimitSubnetSubnetLenIpv6",
            "baseName": "ratelimit_subnet_subnet_len_ipv6",
            "type": "number",
            "format": ""
        },
        {
            "name": "ratelimitWhitelist",
            "baseName": "ratelimit_whitelist",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "blockingMode",
            "baseName": "blocking_mode",
            "type": "DnsInfo200ResponseBlockingModeEnum",
            "format": ""
        },
        {
            "name": "blockingIpv4",
            "baseName": "blocking_ipv4",
            "type": "string",
            "format": ""
        },
        {
            "name": "blockingIpv6",
            "baseName": "blocking_ipv6",
            "type": "string",
            "format": ""
        },
        {
            "name": "blockedResponseTtl",
            "baseName": "blocked_response_ttl",
            "type": "number",
            "format": ""
        },
        {
            "name": "protectionDisabledUntil",
            "baseName": "protection_disabled_until",
            "type": "string",
            "format": ""
        },
        {
            "name": "ednsCsEnabled",
            "baseName": "edns_cs_enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ednsCsUseCustom",
            "baseName": "edns_cs_use_custom",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ednsCsCustomIp",
            "baseName": "edns_cs_custom_ip",
            "type": "string",
            "format": ""
        },
        {
            "name": "disableIpv6",
            "baseName": "disable_ipv6",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "dnssecEnabled",
            "baseName": "dnssec_enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "cacheSize",
            "baseName": "cache_size",
            "type": "number",
            "format": ""
        },
        {
            "name": "cacheTtlMin",
            "baseName": "cache_ttl_min",
            "type": "number",
            "format": ""
        },
        {
            "name": "cacheTtlMax",
            "baseName": "cache_ttl_max",
            "type": "number",
            "format": ""
        },
        {
            "name": "cacheOptimistic",
            "baseName": "cache_optimistic",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "upstreamMode",
            "baseName": "upstream_mode",
            "type": "DnsInfo200ResponseUpstreamModeEnum",
            "format": ""
        },
        {
            "name": "usePrivatePtrResolvers",
            "baseName": "use_private_ptr_resolvers",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "resolveClients",
            "baseName": "resolve_clients",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "localPtrUpstreams",
            "baseName": "local_ptr_upstreams",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "defaultLocalPtrUpstreams",
            "baseName": "default_local_ptr_upstreams",
            "type": "Array<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return DnsInfo200Response.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum DnsInfo200ResponseBlockingModeEnum {
    Default = 'default',
    Refused = 'refused',
    Nxdomain = 'nxdomain',
    NullIp = 'null_ip',
    CustomIp = 'custom_ip'
}
export enum DnsInfo200ResponseUpstreamModeEnum {
    DeprecatedtruedescriptionUseLoadBalanceInstead = '{\"const\":\"\",\"deprecated\":true,\"description\":\"Use `load_balance` instead.\"}',
    FastestAddr = '{\"const\":\"fastest_addr\"}',
    LoadBalance = '{\"const\":\"load_balance\"}',
    Parallel = '{\"const\":\"parallel\"}'
}

