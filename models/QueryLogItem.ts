/**
 * AdGuard Home
 * AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 
 *
 * OpenAPI spec version: 0.107
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { DnsAnswer } from '../models/DnsAnswer.js';
import { DnsQuestion } from '../models/DnsQuestion.js';
import { QueryLogItemClient } from '../models/QueryLogItemClient.js';
import { ResultRule } from '../models/ResultRule.js';
import { HttpFile } from '../http/http.js';

/**
* Query log item
*/
export class QueryLogItem {
    'answer'?: Array<DnsAnswer>;
    /**
    * Answer from upstream server (optional)
    */
    'originalAnswer'?: Array<DnsAnswer>;
    /**
    * Defines if the response has been served from cache. 
    */
    'cached'?: boolean;
    /**
    * Upstream URL starting with tcp://, tls://, https://, or with an IP address. 
    */
    'upstream'?: string;
    /**
    * If true, the response had the Authenticated Data (AD) flag set. 
    */
    'answerDnssec'?: boolean;
    /**
    * The client\'s IP address. 
    */
    'client'?: string;
    /**
    * The ClientID, if provided in DoH, DoQ, or DoT. 
    */
    'clientId'?: string;
    'clientInfo'?: QueryLogItemClient;
    'clientProto'?: QueryLogItemClientProtoEnum;
    /**
    * The IP network defined by an EDNS Client-Subnet option in the request message if any. 
    */
    'ecs'?: string;
    'elapsedMs'?: string;
    'question'?: DnsQuestion;
    /**
    * In case if there\'s a rule applied to this DNS request, this is ID of the filter list that the rule belongs to. Deprecated: use `rules[*].filter_list_id` instead. 
    */
    'filterId'?: number;
    /**
    * Filtering rule applied to the request (if any). Deprecated: use `rules[*].text` instead. 
    */
    'rule'?: string;
    /**
    * Applied rules.
    */
    'rules'?: Array<ResultRule>;
    /**
    * Request filtering status.
    */
    'reason'?: QueryLogItemReasonEnum;
    /**
    * Set if reason=FilteredBlockedService
    */
    'serviceName'?: string;
    /**
    * DNS response status
    */
    'status'?: string;
    /**
    * DNS request processing start time
    */
    'time'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "answer",
            "baseName": "answer",
            "type": "Array<DnsAnswer>",
            "format": ""
        },
        {
            "name": "originalAnswer",
            "baseName": "original_answer",
            "type": "Array<DnsAnswer>",
            "format": ""
        },
        {
            "name": "cached",
            "baseName": "cached",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "upstream",
            "baseName": "upstream",
            "type": "string",
            "format": ""
        },
        {
            "name": "answerDnssec",
            "baseName": "answer_dnssec",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "client",
            "baseName": "client",
            "type": "string",
            "format": ""
        },
        {
            "name": "clientId",
            "baseName": "client_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "clientInfo",
            "baseName": "client_info",
            "type": "QueryLogItemClient",
            "format": ""
        },
        {
            "name": "clientProto",
            "baseName": "client_proto",
            "type": "QueryLogItemClientProtoEnum",
            "format": ""
        },
        {
            "name": "ecs",
            "baseName": "ecs",
            "type": "string",
            "format": ""
        },
        {
            "name": "elapsedMs",
            "baseName": "elapsedMs",
            "type": "string",
            "format": ""
        },
        {
            "name": "question",
            "baseName": "question",
            "type": "DnsQuestion",
            "format": ""
        },
        {
            "name": "filterId",
            "baseName": "filterId",
            "type": "number",
            "format": ""
        },
        {
            "name": "rule",
            "baseName": "rule",
            "type": "string",
            "format": ""
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<ResultRule>",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "QueryLogItemReasonEnum",
            "format": ""
        },
        {
            "name": "serviceName",
            "baseName": "service_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return QueryLogItem.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum QueryLogItemClientProtoEnum {
    Dot = 'dot',
    Doh = 'doh',
    Doq = 'doq',
    Dnscrypt = 'dnscrypt',
    Empty = ''
}
export enum QueryLogItemReasonEnum {
    NotFilteredNotFound = 'NotFilteredNotFound',
    NotFilteredWhiteList = 'NotFilteredWhiteList',
    NotFilteredError = 'NotFilteredError',
    FilteredBlackList = 'FilteredBlackList',
    FilteredSafeBrowsing = 'FilteredSafeBrowsing',
    FilteredParental = 'FilteredParental',
    FilteredInvalid = 'FilteredInvalid',
    FilteredSafeSearch = 'FilteredSafeSearch',
    FilteredBlockedService = 'FilteredBlockedService',
    Rewrite = 'Rewrite',
    RewriteEtcHosts = 'RewriteEtcHosts',
    RewriteRule = 'RewriteRule'
}

